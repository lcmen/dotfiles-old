set nocompatible

call plug#begin('~/.vim/plugged')
  Plug 'airblade/vim-gitgutter'
  Plug 'arcticicestudio/nord-vim'
  Plug 'breuckelen/vim-resize'
  Plug 'christoomey/vim-tmux-navigator'
  Plug 'ctrlpvim/ctrlp.vim'
  Plug 'docunext/closetag.vim'
  Plug 'itchyny/lightline.vim'
  Plug 'jbranchaud/vim-bdubs'
  Plug 'jszakmeister/vim-togglecursor'
  Plug 'junegunn/gv.vim'
  Plug 'ryanoasis/vim-devicons'
  Plug 'scrooloose/nerdtree'
  Plug 'sheerun/vim-polyglot'
  Plug 'tacahiroy/ctrlp-funky'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-rails'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-unimpaired'
  Plug 'troydm/zoomwintab.vim'
  Plug 'w0rp/ale'

  Plug 'prabirshrestha/async.vim'
  Plug 'prabirshrestha/asyncomplete.vim'
  Plug 'prabirshrestha/asyncomplete-buffer.vim'
  Plug 'prabirshrestha/asyncomplete-lsp.vim'
  Plug 'prabirshrestha/vim-lsp'
call plug#end()

let mapleader=" "

" Misc {{{
  set clipboard=unnamed               " Use system clipboard
  set noswapfile                      " Disable swap
  set scrolloff=5                     " Start scrolling 5 lines away from margin
  set sidescrolloff=15                " Start scrolling 15 lines away from side margin
  set nospell                         " Spell checking off
  set splitbelow                      " Split below
  set splitright                      " Split on the right side
" }}}

" Whitespace, tabs & spaces {{{
  set nowrap
  set linebreak
  set textwidth=120
  set wrapmargin=0
  set expandtab                     " Indent with spaces
  set softtabstop=2                 " Number of spaces per <tab> when inserting
  set shiftwidth=2                  " Number of spaces per <tab> when indenting
  set tabstop=4                     " Number of spaces <tab> counts for
" }}}

" Search {{{
  set ignorecase                    " Ignore case when searching
  set smartcase                     " unless there is a capital letter in the query

  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor
" }}}

" Backups {{{
  set nobackup
  set nowritebackup
  set undofile
  set undolevels=1000               " Maximum number of changes that can be undone
  set undoreload=10000              " Maximum number lines to save for undo on a buffer reload
  set undodir=$HOME/.vim/tmp/undo   " Set persistent undo directory
" }}}

" UI {{{
  colorscheme nord
  set background=dark
  set list                          " Show invisible characters
  set listchars=tab:▸\ ,eol:¬,trail:·
  set number                        " Show line numbers
  set relativenumber                " Use relative line numbers
" }}}

" Plugins {{{
  " Ale {{{
    let g:ale_fixers = {}
    let g:ale_fixers['javascript'] = ['prettier']
    let g:ale_fix_on_save = 1
    let g:ale_javascript_prettier_use_local_config = 1
  " }}}

  " Completion {{{
    let g:asyncomplete_remove_duplicates = 1
    let g:asyncomplete_enable_default_mappings = 1
    set completeopt+=preview

    call asyncomplete#register_source(asyncomplete#sources#buffer#get_source_options({
      \ 'name': 'buffer',
      \ 'whitelist': ['*'],
      \ 'blacklist': ['go'],
      \ 'completor': function('asyncomplete#sources#buffer#completor'),
      \ }))
  " }}}

  " CtrlP {{{
    " Use ag for listing the files
    let g:ctrlp_user_command = 'ag %s -f -l --hidden --nocolor -g ""'
    let g:ctrlp_use_caching = 0
    " Always open files in new buffers
    let g:ctrlp_switch_buffer = 0
    " Respect current working directory during Vim session
    let g:ctrlp_working_path_mode = 0
  " }}}

  let g:NERDTreeShowHidden = 1

  " Lightline {{{
    let g:lightline = {
      \ 'colorscheme': 'nord',
      \ 'component_function': {
      \   'filetype': 'StatusLineFiletype',
      \   'fileformat': 'StatusLineFileformat',
      \ }
      \ }
  " }}}

" Mappings {{{
  set backspace=indent,eol,start

  nnoremap , :

  " Yank to the end of line
  nnoremap Y y$

  " Delete to the end of line
  nnoremap D d$

  " If you forgot about sudo before opening the file
  cmap w!! w !sudo tee % >/dev/null

  " Move more senibly when line wrapping enabled
  nmap <silent> k gk
  nmap <silent> j gj

  " Move to the end line (next to 0 which goes to the beginning)
  nmap <silent> - $

  " Select all text
  nnoremap <silent> va ggVG

  " Disable hl
  nnoremap <silent> <leader><cr> :noh<cr>

  " Moving block of codes
  vnoremap < <gv
  vnoremap > >gv

  " Tabs
  nnoremap [g gT
  nnoremap ]g gt

  nnoremap <C-e> :NERDTreeToggle<CR>
  nnoremap <leader>e :NERDTreeFind<CR>

  " Window resizes
  let g:vim_resize_disable_auto_mappings = 1
  nnoremap <silent> <left> :CmdResizeLeft<cr>
  nnoremap <silent> <down> :CmdResizeDown<cr>
  nnoremap <silent> <up> :CmdResizeUp<cr>
  nnoremap <silent> <right> :CmdResizeRight<cr>

  " Enable hlserch on start
  nnoremap / :set hlsearch<cr>/

  " CtrlP {{{
    nnoremap <leader>p :CtrlPFunky<CR>
    nnoremap <leader>P :execute 'CtrlPFunky ' . expand('<cword>')<CR>
  " }}}

  " Completion {{{
    inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
    inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
    inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<cr>"

    nnoremap <leader>h :LspHover
  " }}}
" }}}

" Functions {{{
  function! PushToCurrentBranch()
    execute ":Gwrite"
    let branch = system('git rev-parse --abbrev-ref HEAD')
    execute ":Git push origin" . branch
  endfunction

  function! StripTrailingWhiteSpace()
    " Ignore for markdown and slim
    if &filetype =~ 'markdown' || &filetype =~ 'slim'
      return
    endif
    %s/\s\+$//e
  endfunction
" }}}

" Commands {{{
  " Ag for search
  command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
  command! Gpush call PushToCurrentBranch()

  augroup hooks
    " Trim white spaces on save
    autocmd BufWritePre * call StripTrailingWhiteSpace()
    " Leave paste mode on exit
    autocmd InsertLeave * set nopaste
    " Toggle relative to absolute on leave and vice-versa on enter
    autocmd BufEnter,FocusGained * set relativenumber
    autocmd BufLeave,FocusLost * set norelativenumber
  augroup END

  augroup modes
    autocmd Filetype gitcommit setl spell textwidth=72
    autocmd Filetype markdown setl spell colorcolumn=0 wrap linebreak
    autocmd BufNewFile,BufReadPost *.md,*.mdown,*.mdwn,*.mmd set filetype=markdown
    autocmd BufNewFile,BufReadPost Rakefile,Vagrantfile set filetype=ruby
  augroup END

  " Completion {{{
    if executable('typescript-language-server')
      au User lsp_setup call lsp#register_server({
        \ 'name': 'typescript-language-server',
        \ 'cmd': { server_info->[&shell, &shellcmdflag, 'typescript-language-server --stdio']},
        \ 'root_uri': { server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_directory(lsp#utils#get_buffer_path(), '.git/..'))},
        \ 'whitelist': ['typescript', 'javascript', 'javascript.jsx']
        \ })
    endif
  " }}}
" }}}
