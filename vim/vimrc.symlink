set nocompatible

if !filereadable(expand('~/.vim/autoload/plug.vim'))
  if !executable("curl")
    echoerr "You have to install curl or first install vim-plug yourself!"
    execute "q!"
  endif
  echo "Installing Vim-Plug..."
  echo ""
  silent !\curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

  autocmd VimEnter * PlugInstall
endif

call plug#begin('~/.vim/plugged')
  Plug 'sonph/onehalf', {'rtp': 'vim/'}
  Plug 'AndrewRadev/ember_tools.vim'
  Plug 'AndrewRadev/sideways.vim'
  Plug 'AndrewRadev/splitjoin.vim'
  Plug 'airblade/vim-gitgutter'
  Plug 'arcticicestudio/nord-vim'
  Plug 'breuckelen/vim-resize'
  Plug 'Chiel92/vim-autoformat'
  Plug 'christoomey/vim-tmux-navigator'
  Plug 'ctrlpvim/ctrlp.vim'
  Plug 'docunext/closetag.vim'
  Plug 'ervandew/supertab'
  Plug 'itchyny/lightline.vim'
  Plug 'janko-m/vim-test'
  Plug 'jbranchaud/vim-bdubs'
  Plug 'jszakmeister/vim-togglecursor'
  Plug 'junegunn/gv.vim'
  Plug 'lokikl/vim-ctrlp-ag'
  Plug 'prabirshrestha/async.vim'
  Plug 'prabirshrestha/vim-lsp'
  Plug 'rking/ag.vim'
  Plug 'ryanoasis/vim-devicons', { 'branch': 'master' }
  Plug 'scrooloose/nerdtree'
  Plug 'sheerun/vim-polyglot'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-dispatch'
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-projectionist'
  Plug 'tpope/vim-rails'
  Plug 'tpope/vim-rake'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-unimpaired'
  Plug 'troydm/zoomwintab.vim'
  Plug 'w0rp/ale'
  Plug 'wincent/terminus'
call plug#end()

let mapleader=" "

" Misc {{{
  set clipboard=unnamed               " Use system clipboard
  set noswapfile                      " Disable swap
  set scrolloff=5                     " Start scrolling 5 lines away from margin
  set sidescrolloff=15                " Start scrolling 15 lines away from side margin
  set nospell                         " Spell checking off
  set splitbelow                      " Split below
  set splitright                      " Split on the right side
" }}}

" Whitespace, tabs & spaces {{{
  set nowrap
  set linebreak
  set textwidth=120
  set wrapmargin=0
  set expandtab                     " Indent with spaces
  set softtabstop=2                 " Number of spaces per <tab> when inserting
  set shiftwidth=2                  " Number of spaces per <tab> when indenting
  set tabstop=4                     " Number of spaces <tab> counts for
" }}}

" Search {{{
  set completeopt=menu,menuone,preview,noselect,noinsert
  set ignorecase                    " Ignore case when searching
  set smartcase                     " unless there is a capital letter in the query
  set incsearch                     " Enable incremental search
" }}}

" Backups {{{
  set nobackup
  set nowritebackup
  set undofile
  set undolevels=1000               " Maximum number of changes that can be undone
  set undoreload=10000              " Maximum number lines to save for undo on a buffer reload
  set undodir=$HOME/.vim/tmp/undo   " Set persistent undo directory
" }}}

" UI {{{
  colorscheme onehalflight
  set cursorline                    " Show cursor line
  set fillchars+=vert:\             " Disable "|" from split borders
  set list                          " Show invisible characters
  set listchars=tab:▸\ ,eol:¬,trail:·
  set number                        " Show line numbers
  set noshowmode                    " Don't display mode
  set relativenumber                " Use relative line numbers
" }}}

" Plugins {{{
  " Ale {{{
    let g:ale_linters = {'go': ['gofmt', 'golint', 'govet']}
    let g:ale_fixers = {'go': ['gofmt']}
    let g:ale_fix_on_save = 1
  " }}}
  let g:NERDTreeShowHidden = 1

  " Extra file icons {{{
    let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols = {}
    let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['vue'] = '﵂'
  " }}}

  " CtrlP {{{
     let g:ctrlp_use_caching = 0
     " Always open files in new buffers
     let g:ctrlp_switch_buffer = 0
     " Respect current working directory during Vim session
     let g:ctrlp_working_path_mode = 0
     " Ignore those directories
     let g:ctrlp_ag_ignores = '--ignore .git
          \ --ignore "_build/*"
          \ --ignore "deps/*"
          \ --ignore "node_modules/*"
          \ --ignore "vendor/bundle"'
  " }}}

  " Lighline {{{
    let g:lightline = {
         \ 'colorscheme': 'one',
         \ }
  " }}}

  " LSP {{{
  let g:lsp_diagnostics_enabled = 0

  au User lsp_setup call lsp#register_server({
        \ 'name': 'bingo',
        \ 'cmd': {server_info->['bingo', '-mode', 'stdio', '-format-style', 'fmt']},
        \ 'whitelist': ['go'],
        \ })
  au User lsp_setup call lsp#register_server({
        \ 'name': 'javascript support using typescript-language-server',
        \ 'cmd': { server_info->[&shell, &shellcmdflag, 'typescript-language-server --stdio']},
        \ 'root_uri': { server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_directory(lsp#utils#get_buffer_path(), '.git/..'))},
        \ 'whitelist': ['javascript', 'javascript.jsx']
        \ })
  " }}}

  " Projections {{{
   let g:projectionist_heuristics = {
        \ "Rakefile": {
        \   "apps/*.rb": {
        \     "alternate": "spec/{}_spec.rb",
        \     "type": "source"
        \   }
        \ },
        \ "ember-cli-build.js": {
        \   "app/components/*.js": {
        \     "alternate": [
        \       "app/templates/components/{}.hbs",
        \       "app/templates/components/{}.emblem",
        \     ],
        \     "type": "source"
        \   },
        \   "app/controllers/*.js": {
        \     "alternate": [
        \       "app/templates/components/{}.hbs",
        \       "app/templates/components/{}.emblem",
        \     ],
        \     "type": "source"
        \   },
        \   "app/templates/components/*.hbs": {
        \     "alternate": "app/components/{}.js",
        \     "type": "template"
        \   },
        \   "app/templates/components/*.emblem": {
        \     "alternate": "app/components/{}.js",
        \     "type": "template"
        \   },
        \   "app/router.js": { "command": "router" },
        \   "config/environment.js": { "command": "environment" },
        \   "app/models/*.js": {
        \     "command": "model",
        \     "alternate": "tests/unit/models/{}-test.js"
        \   },
        \   "app/services/*.js": {
        \     "command": "service",
        \     "alternate": "tests/unit/services/{}-test.js"
        \   },
        \   "tests/unit/*-test.js": {
        \     "alternate": "app/{}.js",
        \     "command": "test"
        \   },
        \   "tests/acceptance/*-test.js": { "command": "acceptance"},
        \   "tests/integration/*-test.js": { "command": "integration"},
        \ }}
  " }}}

  " Splitjoin {{{
    " disable default keybindings
    let g:splitjoin_split_mapping = ''
    let g:splitjoin_join_mapping = ''
  " }}}

  " Supertab {{{
    let g:SuperTabContextTextOmniPrecedence = ['&omnifunc', '&completefunc']
    let g:SuperTabDefaultCompletionType = "context"
    let g:SuperTabClosePreviewOnPopupClose = 1
  " }}}

  " VimTest {{{
    let test#strategy = {
          \ "nearest": "dispatch",
          \ "file": "dispatch",
          \ "suite": "dispatch_background",
          \ }
  " }}}
" }}}

" Mappings {{{
  nnoremap , :

  " Quickly switch between buffers
  nnoremap <silent> <leader><leader> :b#<CR>

  " Yank to the end of line
  nnoremap Y y$

  " Delete to the end of line
  nnoremap D d$

  " If you forgot about sudo before opening the file
  cmap w!! w !sudo tee % >/dev/null

  " Move more senibly when line wrapping enabled
  nmap <silent> k gk
  nmap <silent> j gj

  " Select all text
  nnoremap <silent> va ggVG

  " Disable hl
  nnoremap <silent> <leader><cr> :noh<cr>

  " Moving block of codes
  vnoremap < <gv
  vnoremap > >gv

  " Tabs
  nnoremap [g gT
  nnoremap ]g gt

  " NERDTree
  nnoremap <silent> <C-e>     :NERDTreeToggle<CR>
  nnoremap <silent> <leader>e :NERDTreeFind<CR>

  " Window resizes
  let g:vim_resize_disable_auto_mappings = 1
  nnoremap <silent> <left>  :CmdResizeLeft<cr>
  nnoremap <silent> <down>  :CmdResizeDown<cr>
  nnoremap <silent> <up>    :CmdResizeUp<cr>
  nnoremap <silent> <right> :CmdResizeRight<cr>

  " Autoformat
  noremap <F3> :Autoformat<CR>

  let g:formatdef_fixjson = '"fixjson --indent 2"'

  " Enable hlserch on start
  nnoremap / :set hlsearch<cr>/

  " Close quickfix list
  nnoremap <silent> q :cclose<CR> :pclose<CR>
  nnoremap <silent> Q :cclose<CR> :pclose<CR>

  " LSP
  nmap <silent> <leader>lf :LspDocumentFormat<CR>
  vmap <silent> <leader>lf :LspDocumentRangeFormat<CR>
  nmap <silent> <leader>lg :LspDefinition<CR>
  nmap <silent> <leader>lh :LspHover<CR>
  nmap <silent> <leader>lr :LspReferences<CR>
  nmap <silent> <leader>lR :LspRename<CR>

  " Tests
  nmap <silent> <leader>tt :TestNearest<CR>
  nmap <silent> <leader>t. :TestLast<CR>
  nmap <silent> <leader>tf :TestFile<CR>
  nmap <silent> <leader>ta :TestSuite<CR>
  nmap <silent> <leader>tv :TestVisit<CR>

  " Refactoring
  nmap <silent> <leader>rh :SidewaysLeft<cr>
  nmap <silent> <leader>rl :SidewaysRight<cr>
  nmap <silent> <leader>rj :SplitjoinJoin<cr>
  nmap <silent> <leader>rk :SplitjoinSplit<cr>

  " Reload config file
  nmap <silent> <leader>R :source ~/.vimrc<CR>
" }}}

" Functions {{{
  function! PushToCurrentBranch()
    execute ":Gwrite"
    let branch = system('git rev-parse --abbrev-ref HEAD')
    execute ":Git push origin" . branch
  endfunction

  function! StripTrailingWhiteSpace()
    " Ignore for markdown and slim
    if &filetype =~ 'markdown' || &filetype =~ 'slim'
      return
    endif
    %s/\s\+$//e
  endfunction
" }}}

" Commands {{{
  command! Gpush call PushToCurrentBranch()

  augroup hooks
    " Trim white spaces on save
    autocmd BufWritePre * call StripTrailingWhiteSpace()
    " Leave paste mode on exit
    autocmd InsertLeave * set nopaste
    " Toggle relative to absolute on leave and vice-versa on enter
    autocmd BufEnter,FocusGained * set relativenumber
    autocmd BufLeave,FocusLost * set norelativenumber
  augroup END

  augroup modes
    autocmd Filetype gitcommit setl spell textwidth=72
    autocmd Filetype go setl softtabstop=4 shiftwidth=4 noexpandtab omnifunc=lsp#complete
    autocmd Filetype markdown setl spell colorcolumn=0 wrap linebreak
    autocmd BufNewFile,BufReadPost *.md,*.mdown,*.mdwn,*.mmd set filetype=markdown
    autocmd BufNewFile,BufReadPost Rakefile,Vagrantfile set filetype=ruby
  augroup END
" }}}

" Enable project's vimrc
set exrc
