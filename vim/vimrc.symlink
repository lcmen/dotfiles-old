" ===============================================
" == Small fixes ================================
" ===============================================

" Change shell if it's fish
if $SHELL =~ 'bin/fish'
  set shell=/bin/sh
endif

" Fix C-h mapping on neovim
if has('nvim')
  nmap <BS> <C-W>h
endif

" ===============================================
" == Plugins ====================================
" ===============================================
set nocompatible
filetype on
filetype off

" Set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Vundle plugins
Plugin 'gmarik/Vundle.vim'

" Navigation
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'tacahiroy/ctrlp-funky'
Plugin 'rking/ag.vim'
Plugin 'pbrisbin/vim-mkdir'
Plugin 'tpope/vim-projectionist'
Plugin 'scrooloose/nerdtree'
Plugin 'christoomey/vim-tmux-navigator'

" Utilities
Plugin 'scrooloose/syntastic'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-dispatch'
Plugin 'airblade/vim-gitgutter'
Plugin 'ervandew/supertab'

" UI
Plugin 'bling/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'tpope/vim-fugitive'

" Language & syntax specific
Plugin 'jgdavey/vim-blockle'
Plugin 'kchmck/vim-coffee-script'
Plugin 'tpope/vim-endwise'
Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-bundler'
Plugin 'skalnik/vim-vroom'
Plugin 'elzr/vim-json'
Plugin 'mustache/vim-mustache-handlebars'

call vundle#end()
filetype plugin indent on

" Load all functions from functions directory
runtime! functions/*.vim

" ===============================================
" == Settings ===================================
" ===============================================

" General
set encoding=utf-8
set nocompatible
set noswapfile
syntax enable

" Display
set t_Co=256
set guioptions=aAce
set laststatus=2
set noshowmode
set showcmd
let base16colorspace=256
set background=dark
colorscheme base16-railscasts

" Editor
set backspace=indent,eol,start    " Allow backspacing over everything in inset mode
set scrolloff=5                   " Start scrolling 5 lines away from margin
set sidescrolloff=15              " Start scrolling 15 lines away from side margin
set sidescroll=1
set clipboard=unnamed             " Yield to system clipboard

" Whitespace
set nowrap                        " Wrap visually
set linebreak                     " Disable line break
set nolist                        " in the middle of words
set textwidth=0                   " Don't insert line breaks automatically
set wrapmargin=0

" Indentation
set autoindent                    " Indent automatically
set expandtab                     " Indent with spaces
set softtabstop=2                 " Number of spaces per <tab> when inserting
set shiftwidth=2                  " Number of spaces per <tab> when indenting
set tabstop=4                     " Number of spaces <tab> counts for

" UI
set number                        " Show line numbers
set relativenumber                " Use relative line numbers
set listchars=tab:▸\              " Char representing a tab
set listchars+=extends:❯          " Char representing an extending line
set listchars+=nbsp:␣             " Non breaking space
set listchars+=precedes:❮         " Char representing an extending line in the other direction
set listchars+=trail:·            " Show trailing spaces as dots
set statusline=%<%f\ %h%m%r%=\ %-14.(%l,%c%V%)\ %P

" Search
set hlsearch
set incsearch
set ignorecase
set smartcase

" Splits
set splitright                    " Split on the right side
set splitbelow                    " Split below

" Use The Silver Search if available
if executable('ag')
  set grepprg=ag\ -f\ -U\ --nogroup\ --nocolor
endif

" Ctags
set tags+=gem.tags

" Leave paste mode on exit
autocmd InsertLeave * set nopaste

" Trim white spaces on save
autocmd BufWritePre * call StripTrailingWhiteSpace()

" Filetypes
autocmd Filetype gitcommit setlocal spell textwidth=72
autocmd FileType php setl softtabstop=4 shiftwidth=4
autocmd FileType python setl softtabstop=4 shiftwidth=4
autocmd FileType xml setl softtabstop=2 shiftwidth=2

" Syntax
autocmd BufNewFile,BufReadPost *.jst set syntax=html
autocmd BufNewFile,BufReadPost *.md,*.mdown,*.mdwn,*.mmd set filetype=markdown
autocmd BufNewFile,BufReadPost *.tss set filetype=javascript " Titanium Alloy Style Files
autocmd BufNewFile,BufReadPost Rakefile,Vagrantfile set filetype=ruby

" ===============================================
" == Mappings ===================================
" ===============================================

" Space as leader key
let mapleader="\<Space>"

" Disable ex mode
nnoremap Q <nop>

" Move more senibly when line wrapping enabled
nmap k gk
nmap j gj

" Quick edit and reload of .vimrc
nmap <leader>vo :tabe $MYVIMRC<CR>
nmap <leader>vr :source $MYVIMRC<CR>

" Block arrow keys
nnoremap <Left> :echoe "Use h"<CR>
nnoremap <Down> :echoe "Use j"<CR>
nnoremap <Up>   :echoe "Use k"<CR>
nnoremap <Right>:echoe "Use l"<CR>

" New blank tab
nnoremap <S-t> :tabe<CR>

" Resize windows with the arrow keys
nnoremap <up>    <C-W>+
nnoremap <down>  <C-W>-
nnoremap <left>  3<C-W>>
nnoremap <right> 3<C-W><

" Moving block of codes
vnoremap < <gv
vnoremap > >gv

" Buffers
nnoremap <Tab> :bn<CR>                      " Tab to go next buffer
nnoremap <S-Tab> :bp<CR>                    " Shift-Tab to go previous buffer
nnoremap <silent> <leader>q :call DeleteBuffer()<CR>
nnoremap <silent> <leader>aq :call DeleteAllBuffers()<CR>
nnoremap <silent> <leader>Q :BufOnly<CR>

" Match buffers matching file pattern
cnoremap <C-q> <C-a>

" Clear the search buffer
nmap <silent> <S-h> :nohlsearch<CR>

" Search word under a cursor
nnoremap <leader>? :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" Search shortcut
if executable('ag')
  nnoremap <leader>/ :Ag<SPACE>
endif

" Follow symbol
nnoremap <leader>] g<C-]>
vnoremap <leader>] g<C-]>

" Return to the previous position
nnoremap <leader>[ <C-t>

" Quickfix
nnoremap <leader>cq :Copen<CR>:q<CR>
nnoremap <leader>co :Copen<CR>

" Project navigation (vim-rails + vim-projectionist)
nnoremap <leader>ec :Econtroller<Space>
nnoremap <leader>ee :Eenvironment<Space>
nnoremap <leader>eh :Ehelper<Space>
nnoremap <leader>em :Emodel<Space>
nnoremap <leader>eo :Emailer<Space>
nnoremap <leader>es :Estyle<Space>
nnoremap <leader>ev :Eview<Space>
nnoremap <leader>evc :Vcontroller<Space>
nnoremap <leader>eve :Venvironment<Space>
nnoremap <leader>evh :Vhelper<Space>
nnoremap <leader>evm :Vmodel<Space>
nnoremap <leader>evo :Vmailer<Space>
nnoremap <leader>evs :Vstyle<Space>
nnoremap <leader>evv :Vview<Space>

" Ruby tests
map <Leader>t :VroomRunTestFile<CR>
map <Leader>s :VroomRunNearestTest<CR>
map <Leader>l :VroomRunLastTest<CR>

" Files
map <leader>m :call RenameFile()<CR>

" Plugins mapping
nnoremap <silent> <F3> :NERDTreeToggle<CR>
nnoremap <silent> <F4> :NERDTreeFind<CR>
nnoremap <leader>n :CtrlPFunky<CR>
nnoremap <leader>N :execute 'CtrlPFunky ' . expand('<cword>')<Cr>
nnoremap <c-_> gcc<CR>
nnoremap <leader><tab> :SuperTabHelp<CR>

" ===============================================
" == Plugin config ==============================
" ===============================================

" Make CtrlP use ag for listing the files
let g:ctrlp_user_command = 'ag %s -f -l -U --hidden --nocolor -g ""'

" No need for caching when ag is used
let g:ctrlp_use_caching = 0

let g:ctrlp_working_path_mode = 0

" Increase default CtrlP settings
let g:ctrlp_max_files = 0
let g:ctrlp_max_height = 20
let g:ctrlp_max_depth = 40

" Airline
let g:airline_powerline_fonts = 1
" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1
" Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'

" Vim vroom
let g:vroom_use_bundle_exec = 1

" Use Vim dispatch in Tmux
if InTmuxSession()
  let g:vroom_use_dispatch = 1
end

if !exists('g:rails_gem_projections')
  let g:rails_gem_projections = {}
endif

call extend(g:rails_gem_projections, {
    \ "fabrication": {
    \   "spec/fabricators/*_fabricator.rb": {
    \     "command": ["fabricator", "factory"],
    \     "alternate": "app/models/{}.rb",
    \     "related": "db/schema.rb#{pluralize}",
    \     "test": "spec/models/{}_spec.rb",
    \     "template": "Fabricator :{} do\nend",
    \     "affinity": "model"
    \   }
    \ },
    \ "factory_girl": {
    \   "spec/factories/*.rb": {
    \     "command": "factory",
    \     "alternate": "app/models/{}.rb",
    \     "related": "db/schema.rb#{pluralize}",
    \     "test": "spec/models/{}_spec.rb",
    \     "template": "FactoryGirl.define do\n  factory :{} do\n  end\nend",
    \     "affinity": "model"
    \   },
    \   "spec/factories.rb": {
    \      "command": "factory"
    \   },
    \   "test/factories.rb": {
    \      "command": "factory"
    \   }
    \ },
    \ "request_specs": {
    \   "spec/requests/*_spec.rb": {
    \     "command": "request",
    \     "alternate": "app/controllers/{}.rb",
    \     "affinity": "controller"
    \   }
    \ },
  \ }, 'keep')

" Vim projectionist:
"   - tiapp.xml - Titanium project configuration
let g:projectionist_heuristics = {
  \   "tiapp.xml": {
  \     "app/config.json": {
  \       "alternate": "app/config.example.json",
  \       "type": "config"
  \     },
  \     "app/config.example.json": {
  \       "alternate": "app/config.json",
  \       "type": "econfig"
  \     },
  \     "app/controllers/*.js": {
  \       "alternate": "app/views/{}.xml",
  \       "type": "controller"
  \     },
  \     "app/lib/*.js": {
  \       "type": "lib"
  \     },
  \     "app/models/*.js": {
  \       "type": "model"
  \     },
  \     "app/styles/*.tss": {
  \       "alternate": "app/views/{}.xml",
  \       "type": "style"
  \     },
  \     "app/views/*.xml": {
  \       "alternate": "app/controllers/{}.js",
  \       "type": "view"
  \     }
  \   }
  \ }
